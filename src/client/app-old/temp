
// OpenML Theme
const drawerWidth = 240;
const styles = theme => ({
  root: {
    display: 'flex',
    width: '100%',
  },
  toolbar: {
    paddingRight: 24, // keep right padding when drawer closed
  },
  toolbarIcon: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-end',
    padding: '0 8px',
    ...theme.mixins.toolbar,
  },
  appBar: {
    zIndex: theme.zIndex.drawer + 1,
    transition: theme.transitions.create(['width', 'margin'], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen,
    }),
  },
  appBarShift: {
    marginLeft: drawerWidth,
    width: `calc(100% - ${drawerWidth}px)`,
    transition: theme.transitions.create(['width', 'margin'], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
  },
  menuButton: {
    marginLeft: 12,
    marginRight: 36,
  },
  menuButtonHidden: {
    display: 'none',
  },
  title: {
    display: 'none',
    [theme.breakpoints.up('sm')]: {
      display: 'block',
    },
    flexGrow: 1,
  },
  drawerPaper: {
    position: 'relative',
    whiteSpace: 'nowrap',
    width: drawerWidth,
    transition: theme.transitions.create('width', {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
  },
  drawerPaperClose: {
    overflowX: 'hidden',
    transition: theme.transitions.create('width', {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen,
    }),
    width: theme.spacing.unit * 7,
    [theme.breakpoints.up('xs')]: {
      width: theme.spacing.unit * 9,
    },
    [theme.breakpoints.down('xs')]: {
      width: 0,
      display:'none',
    },
  },
  nested: {
    paddingLeft: theme.spacing.unit * 4,
  },
  appBarSpacer: theme.mixins.toolbar,
  content: {
    flexGrow: 1,
    padding: theme.spacing.unit * 3,
    height: '100vh',
    overflow: 'auto',
  },
  chartContainer: {
    marginLeft: -22,
  },
  tableContainer: {
    height: 320,
  },
  h5: {
    marginBottom: theme.spacing.unit * 1,
  },
  icon: {
    marginRight: '0px'
  },
  iconText: {
    fontSize: '1.6rem',
  },
  iconHover: {
    "&:hover": {
      color: red[800]
    }
  },
  grow: {
    flexGrow: 1,
  },
  search: {
    position: 'relative',
    borderRadius: theme.shape.borderRadius,
    backgroundColor: fade(theme.palette.common.white, 0.15),
    '&:hover': {
      backgroundColor: fade(theme.palette.common.white, 0.25),
    },
    marginLeft: 0,
    width: '100%',
    [theme.breakpoints.up('sm')]: {
      marginLeft: theme.spacing.unit,
      width: 'auto',
    },
  },
  searchIcon: {
    width: theme.spacing.unit * 9,
    height: '100%',
    position: 'absolute',
    pointerEvents: 'none',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
  },
  inputRoot: {
    color: 'inherit',
    width: '100%',
  },
  inputInput: {
    paddingTop: theme.spacing.unit,
    paddingRight: theme.spacing.unit,
    paddingBottom: theme.spacing.unit,
    paddingLeft: theme.spacing.unit * 7,
    transition: theme.transitions.create('width'),
    width: '100%',
    [theme.breakpoints.up('sm')]: {
      width: 140,
      '&:focus': {
        width: '100%',
      },
    },
  }
});




// Main navigation Component
class Navigation extends React.Component {
  state = {
    open: true,
  };

  handleDrawerOpen = () => {
    this.setState({ open: true });
  };

  handleDrawerClose = () => {
    this.setState({ open: false });
  };

  componentDidMount() {
    loadCSS(
      "https://use.fontawesome.com/releases/v5.1.0/css/all.css",
      document.querySelector("#insertion-point-jss")
    );
  }

  render() {
    const { classes } = this.props;
    const search_context = {
        types: ['data','task','flow','run','study','user'],
        icons: {
          data: 'fa fa-fw fa-database',
          task: 'fa fa-fw fa-trophy',
          flow: 'fa fa-fw fa-cogs',
          run:  'fa fa-fw fa-star',
          study:'fa fa-fw fa-flask',
          user: 'fa fa-fw fa-user'
        },
        names: {
          data: 'Datasets',
          task: 'Tasks',
          flow: 'Flows',
          run:  'Runs',
          study:'Studies',
          user: 'People'
        },
        colors: {
          data: 'green',
          task: 'yellow',
          flow: 'blue',
          run:  'red',
          study:'purple',
          user: 'lightblue'
        }
    }
    let search_links = search_context.types.map(function(t){
          return (
            <ListItem button className={classNames(search_context.colors[t])} key={t}>
              <ListItemIcon>
                <Icon className={classNames(classes.icon, search_context.icons[t], search_context.colors[t])} />
              </ListItemIcon>
              <ListItemText primary={search_context.names[t]} className={classNames(classes.iconText)} />
            </ListItem>
        )
      })

    return (
      <div>
        <Drawer
          variant="permanent"
          classes={{
            paper: classNames(classes.drawerPaper, !this.state.open && classes.drawerPaperClose),
          }}
          open={this.state.open}
        >
          <div className={classes.toolbarIcon}>
            <IconButton onClick={this.handleDrawerClose}>
              <ChevronLeftIcon />
            </IconButton>
          </div>
          <Divider />
          <Typography variant="h4" gutterBottom component="h2">
            Search
          </Typography>
          <List>{search_links}</List>
          <Divider />
        </Drawer>
        <Content />
</div>
    );
  }
}



const styles = theme => ({
  root: {

  },
});

// Main Panel with routing
class Content extends React.Component {
    render() {
        const { classes } = this.props;
        return (
          <div className={classes.root}>
            <AuthProvider>
              <Switch>
                   <Route exact path={"/"} render={()=>(<Redirect to={"/data"}/>)}/>
                          <Route exact path={"/login"} component={LoginPanel}/>
                           <Route exact path={"/register"} component={RegisterPanel}/>
                           <ProtectedRoute exact path={"/userprofile"} component={UserProfilePanel}/>
                           <Route exact path={"/data"} component={DataListPanel}/>
                           <Route exact path={"/data/:entry"} render={(info)=>(<EntryDetails entry={info.match.params.entry}  type="data"/>)}/>
                           <Route exact path={"/task"} component={TaskListPanel}/>
                           <Route exact path={"/task/:entry"} render={(info)=>(<EntryDetails entry={info.match.params.entry}  type="task"/>)}/>
                           <Route exact path={"/flow"} component={FlowListPanel}/>
                           <Route exact path={"/flow/:entry"} render={(info)=>(<EntryDetails entry={info.match.params.entry}  type="flow"/>)}/>
                           <Route exact path={"/run"} component={RunListPanel}/>
                           <Route exact path={"/run/:entry"} render={(info)=>(<EntryDetails entry={info.match.params.entry}  type="run"/>)}/>
                           <Route exact path={"/study"} component={StudyListPanel}/>
                           <Route exact path={"/study/:entry"} render={(info)=>(<EntryDetails entry={info.match.params.entry}  type="study"/>)}/>
                           <Route exact path={"/user"} component={PeopleListPanel}/>
                           <Route exact path={"/user/:entry"} render={(info)=>(<EntryDetails entry={info.match.params.entry}  type="user"/>)}/>

                  <Route render={(location)=>(<p>404 - {JSON.stringify(location)+""}</p>)}/>
              </Switch>
            </AuthProvider>
            </div>
        )
    }
}

export default withStyles(styles)(Content);



const lightColor = 'rgba(255, 255, 255, 0.7)';

const styles = theme => ({
  secondaryBar: {
    zIndex: 0,
  },
  menuButton: {
    marginLeft: -theme.spacing.unit,
  },
  iconButtonAvatar: {
    padding: 4,
  },
  link: {
    textDecoration: 'none',
    color: lightColor,
    '&:hover': {
      color: theme.palette.common.white,
    },
  },
  button: {
    borderColor: lightColor,
  },
});

function Header(props) {
  const { classes, onDrawerToggle } = props;

  return (
      <AppBar color="primary" position="absolute" elevation={0}>
        <Toolbar>
          <Grid container spacing={8} alignItems="center">
            <Hidden smUp>
              <Grid item>
                <IconButton
                  color="inherit"
                  aria-label="Open drawer"
                  onClick={onDrawerToggle}
                  className={classes.menuButton}
                >
                  <MenuIcon />
                </IconButton>
              </Grid>
            </Hidden>
            <Grid item xs />
            <Grid item>
              <Typography className={classes.link} component="a" href="#">
                Go to docs
              </Typography>
            </Grid>
            <Grid item>
              <Tooltip title="Alerts â€¢ No alters">
                <IconButton color="inherit">
                  <NotificationsIcon />
                </IconButton>
              </Tooltip>
            </Grid>
            <Grid item>
              <IconButton color="inherit" className={classes.iconButtonAvatar}>
                <Avatar className={classes.avatar} src="/static/images/avatar/1.jpg" />
              </IconButton>
            </Grid>
          </Grid>
        </Toolbar>
      </AppBar>
  );
}

Header.propTypes = {
  classes: PropTypes.object.isRequired,
  onDrawerToggle: PropTypes.func.isRequired,
};

export default withStyles(styles)(Header);
